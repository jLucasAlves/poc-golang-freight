version: 2.1
workflows:
  build-deploy:
    jobs:
      # Security Analisys
      - checkmarx:
          context: CHECKMARX
          filters:
            branches:
              only:
                - master
      # Static Analisys
      - sonarqube:
          context: SONAR
      # Tests step
      - tests:
          context:
            - BUILD_AND_PUSH
      # Build and push image
      - build-and-push:
          context:
            - BUILD_AND_PUSH
          requires:
            - tests
            - sonarqube
            - checkmarx
          # filters:
          #   branches:
          #     only:
          #       - qa
          #       - master
      # Deploy to QA ==================================================================================================
      - deploy:
          name: deploy-to-qa
          argo_path: argo/clusters/eks-qa-dafiti-latam/apps
          target_env: qa
          context:
            - DEPLOY
          requires:
            - build-and-push
          # filters:
          #   branches:
          #     only:
          #       - qa
      - feedback-instana:
          name: feedback-instana-qa
          service_name: golang-template-project.eks.qa.dafiti.local
          requires:
            - deploy-to-qa
          context:
            - DEPLOY_QA
            - INSTANA
      # ===============================================================================================================
      # Deploy to live ================================================================================================
      - wait-approval:
          type: approval
          requires:
            - build-and-push
          # filters:
          #   branches:
          #     only:
          #       - master
      - deploy:
          name: deploy-to-live
          argo_path: argo/clusters/eks-live-dafiti-latam/apps
          target_env: live
          context:
            - DEPLOY
            - INSTANA
          requires:
            - wait-approval
          # filters:
          #   branches:
          #     only:
          #       - master
      - feedback-instana:
          name: feedback-instana-live
          service_name: golang-template-project.eks.live.dafiti.local
          requires:
            - deploy-to-live
          context:
            - DEPLOY_LIVE
            - INSTANA
      # ===============================================================================================================

orbs:
  aws-ecr: circleci/aws-ecr@7.3.0
  aws-cli: circleci/aws-cli@2.0.3
  pipeline-feedback: instana/pipeline-feedback@1.2.0

commands:
  setup_docker:
    steps:
      - setup_remote_docker:
          docker_layer_caching: false
  docker_aws_login:
    steps:
      - aws-cli/setup
      - run:
          name: Login docker aws ECR
          command: aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 556684128444.dkr.ecr.us-east-1.amazonaws.com

  setup-git-composer:
    description: >
      Config git and composer to use GITHUB_ACCESS_TOKEN
      requires a context with GITHUB_ACCESS_TOKEN variable available
    steps:
      - run:
          name: Apply GITHUB_ACCESS_TOKEN to git and composer
          command: |
            git config --global url."https://${GITHUB_ACCESS_TOKEN}:x-oauth-basic@github.com/".insteadOf "https://git@github.com:"

executors:
  sonarqube:
    docker:
      - image: newtmitch/sonar-scanner:3.0
  default:
    docker:
      - image: cimg/go:1.16
  checkmarx:
    docker:
      - image: 556684128444.dkr.ecr.us-east-1.amazonaws.com/checkmarx
        aws_auth:
          aws_access_key_id: $AWS_ECR_ACCESS_KEY_ID
          aws_secret_access_key: $AWS_ECR_SECRET_ACCESS_KEY
  instana:
    docker:
      - image: "instana/pipeline-feedback-orb-executor:latest"

jobs:
  # Tests step
  tests:
    executor: default
    steps:
      - checkout
      - setup_docker
      - docker_aws_login
      - setup-git-composer
      - run:
          name: Build image
          command: docker-compose build --build-arg GITHUB_ACCESS_TOKEN=${GITHUB_ACCESS_TOKEN} ci
      - run:
          name: Run unit tests
          command: docker-compose run --rm ci

  # Sonarqube
  sonarqube:
    executor: sonarqube
    steps:
      - checkout
      - setup_docker
      - run:
          name: Run Sonar
          command: |
            sonar-scanner \
              -Dsonar.analysis.mode=preview \
              -Dsonar.host.url=${SONAR_URL} \
              -Dsonar.login=${SONAR_TOKEN}
  # Build and push image to repository
  build-and-push:
    executor: default
    steps:
      - checkout
      - setup_docker
      - docker_aws_login
      - setup-git-composer
      - run:
          name: Generate rev.txt
          command: git show -s --format="%ai %H %s %aN" HEAD > rev.txt
      - aws-ecr/build-and-push-image:
          checkout: false
          repo: ${CIRCLE_PROJECT_REPONAME}
          tag: $(echo ${CIRCLE_SHA1} | head -c7)
          extra-build-args: --build-arg GITHUB_ACCESS_TOKEN=${GITHUB_ACCESS_TOKEN}

  checkmarx:
    executor: checkmarx
    steps:
      - run:
          name: Checking pending vulnerabilities
          command: checkmarx

  deploy:
    parameters:
      argo_path:
        type: string
      target_env:
        type: string
        default: qa
    executor: default
    steps:
      - run:
          name: Checkout argo repo
          command: git clone https://${GITHUB_ACCESS_TOKEN}@github.com/dafiti-group/argo.git
      - run:
          name: Commit change image tag into <<parameters.target_env>> directory
          command: |
            cd <<parameters.argo_path>>
            IMAGE="tag: \"$(echo ${CIRCLE_SHA1} | head -c7)\""
            CONFIG_FILE=$(echo "${CIRCLE_PROJECT_REPONAME}.yaml")
            sed -Ei "s|tag: \"[a-z0-9]+\"|${IMAGE}|" ${CONFIG_FILE}
            git config --global user.email "k8s-values-updater@mailinator.com"
            git config --global user.name "k8s-values-updater"
            git diff
            git add .
            git commit -m "changing ${CIRCLE_PROJECT_REPONAME} image tag value for <<parameters.target_env>>"
            git push

  feedback-instana:
    description: >
      requires
        - orb: pipeline-feedback: instana/pipeline-feedback@1.2.0
        - executor: instana/pipeline-feedback-orb-executor:latest
    parameters:
      service_name:
        type: string
        description: https://apm-dafiti.instana.io/
    executor: instana
    steps:
      - setup_docker
      - pipeline-feedback/create_release:
          release_name: "${ENV_SHORT}-${CIRCLE_PROJECT_REPONAME} commit ${CIRCLE_SHA1}"
          release_scope: |
            {
              "services": [
                {"name": "<< parameters.service_name >>"}
              ]
            }
